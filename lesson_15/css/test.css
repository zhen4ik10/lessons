/* Підключення шрифтів */
@import url("fonts.css");
/* Скидання стилів */
@import url("reset.css");

body {
    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
    background-color: #333;
    color: #fff;
}

.wrapper {
    min-height: 100%;
    overflow: clip;
}

/* Прибиття футера до низу екрану */

.header {
    background-color: #77608d;
    padding: 15px;
    text-align: center;
}

.page {
    background-color: #794f45;
}

.footer {
    background-color: #7A956B;
    padding: 15px;
    text-align: center;
}

/* 
Flexbox - це цілий модуль,
що містить у собі набір властивостей
та їх значень як для батьківського
об'єкту (flex-контейнера), так і для 
його дочірніх елементів (flex-елементів).

Основною перевагою гнучкої FLEX розмітки 
є можливість змінювати ширину/висоту простір
навколо та порядок flex-елементів, для того,
щоб найкращим чином заповнити доступний простір
flex-контейнера та полегшувати адаптивність.
*/

/* FLEX-контейнера */
.block {
    background-color: #794f45;
    border: 5px solid red;
    /* Властивості flex-контейнера */

    /* 
    display: flex/inline-flex; 
    1) Визначає flex-контейнера,
    блочний або блочний-рядковий (залежить від значення).
    2) Перетворює всі свої беспосередні дочірні
    елементи у flex-елементів.
    */
    display: flex;

    /* 
    flex-wrap
    Визначає, чи зможуть flex-елементи переміщатися
    на наступні рядки, коли перестають поміщатися
    всередині flex-контейнера.

    nowrap - (за замовченням) flex-елементи не можуть
    переміщатися на наступні рядки flex-контейнера.
    wrap - Flex-елементи зможуть переміщатися на 
    наступні рядки flex-контейнера.
    wrap-reverse - Flex-елементи зможуть переміщатися
    на наступні рядки flex-контейнера, але у зворотному порядку.
    */
    flex-wrap: wrap;

    /* 
    justify-content
    Визначає вирівнювання вздовж основної осі
    (напрямок залежить від значення властивості flex-direction)
    flex-start - Значення за замовченням (не потрібно вказувати)
    Flex-елементи притискаються до початку осі.
    flex-end - Flex-елементи притискаються вкінець осі.
    center - Flex-елементи розташовуються в центрі основної осі.
    Перша група значень керує положенням об'єктів по основній осі (спочатку осі, в кінці осі, по центру).


    Спряцює тільки в якщо буде (вільний простір)
    Друга група значень керує вільним простором.
    space-between - Flex-елементи розміщуються
    поступово по основній осі.
    Перший елементи знаходиться на початку осі,
    останній елемент знаходиться наприцінці осі.
    Між елементами постійно однаковий простір.

    space-around - Flex-елементи розташовуються рівномірно
    по основній осі. До кожного flex-елементу
    додається простір ліворуч і праворуч.

    space-evenly - Flex-елементи розташовуються рівномірно по 
    основній осі з однаковим простором навколо них.
    */
    /* justify-content: flex-start; */

    /* 
    align-items
    Визначає вирівнювання вздовж поперечної осі 
    (напрямок залежить від значення властивості flex-direction)
    stretch - Значення за замовченням (не потрібно вказувати)
    Flex-елементи розтягуються весь розмір поперечної осі flex-контейнера
    flex-start - Flex-елементи притискаються до початку
    поперечної осі.
    flex-end - Flex-елементи притискаються вкінець поперечної осі.
    center - Flex-елементи по центру.
    */
    align-items: stretch;

    /* 
    flex-direction
    Встановлює основну вісь,
    таким чином визначає напрямок flex-елементів,
    розташованих у flex-контейнері.
    row - Значення за замовченням (не потрібно вказувати).
    Основна вісь горизонтальна. Всі Flex-елементи
    розташовуються ліворуч по горизонталі.
    row-reverse - змінює напрям горизонтального вектору
    column - змінює головну вісь на вертикальну ( знизу вгору)
    */
    /* height: 300px; */
    flex-direction: row;

    /* 
    gap 
    Проміжок між Flex-елементи
    Не залежить від Flex-direction
    */

    /* Загальний (колонкам та рядкам) */
    /* !!! Погано працює з відсотковим basis */
    gap: 10px;

    /* Між колонками */
    /* column-gap: 15px; */
    /* Між рядками */
    /* row-gap: 30px; */
}

/* 
Властивості Flex-елементів.
Застосовуються для Flex-елемента,
дочірнього об'єкта Flex-контейнера
*/

/* 
align-self
Перевизначає для конкретного Flex-елемента
вирівнювання вздовж поперечної осі
(напрямок залежить від значень якості flex-direction).
*/


/* 
flex-grow - 0 заборонено. 1 дозволено. (За замовченням - 0)
Визначає можливість елемента збільшуватись (більше ніє flex-basis)
у розмірі,
при необхідності заповнюючи весь Flex-контейнер.

flex-shrinnk - 0 заборонено. 1 дозволено. (За замовченням - 1)
Визначає можливість елемента зменшуватись (меньше ніж flex-basis)
у розмірі,
при необхідності заповнюючи вес Flex-контейнера

flex-basis - Визначає базовий розмір елемента
за замовченням, до розподілу простору, що залишився.
Значення можуть бути у відсотках пікселях тошо.
auto (за замовченням) - розмір по контенту
*/

/* 
order 
Керує порядок, 
в якому розташовуються Flex-елементаи
всередині Flex-контейнера
При зміні порядку хоча б для одного flex-елементe,
варто прописати усім flex-елементам
 навіть тим які лишаються на своєму місці.
*/

/* FLEX-елементів */
.block__item {
    font-size: 25px;
    font-weight: 700;
    background-color: #7A956B;
    padding: 10px;
    text-align: center;
    border: 5px solid #77608d;

    /* 
    Flex-елемент може бути
    одночасно і Flex-контейнером 
    */
    /* display: flex;
    justify-content: center;
    align-items: center; */

    flex-grow: 1;
    flex-shrink: 1;
    flex-basis: 33.333%;
}

.block__item:nth-child(1) {
    /* align-self: flex-start; */
    /* order: 4; */
}

/* ефект width */
/* .block__item:nth-child(2) {
    flex-grow: 0;
    flex-shrink: 0;
    flex-basis: 200px;
} */

/* ефект min-width */
/* .block__item:nth-child(2) {
    flex-grow: 1;
    flex-shrink: 0;
    flex-basis: 200px;
} */

/* ефект max-width */
.block__item:nth-child(2) {
    /* order: 5; */
    /* flex-grow: 0;
    flex-shrink: 1;
    flex-basis: 200px; */
    /* Універсальний запис */
    /* flex: flex-grow flex-shrink flex-basis*/

    /* за замовченням (заборонено збільшуватись, дозволено зменьшуватись і розмір по розміру контенту) */
    /* flex: 0 1 auto; */
}

.block__item:nth-child(3) {
    /* order: 2; */
}

.block__item:nth-child(4) {
    /* order: 1; */
}

.block__item:nth-child(5) {
    /* order: 3; */
}

/* -------------------------- */

.container {
    max-width: 800px;
    /* overflow: hidden; */
    margin: 0 auto;
    /* padding-top: 50px; */
    /* padding-bottom: 50px; */
    /* background-color: #666; */
}

/* FLEX-контейнер */
.column-gap {
    /* background-color: #794f45; */
    display: flex;
    flex-wrap: wrap;
    margin: 0px -10px -20px -10px;
}

/* FLEX-елементи */
.column-gap__column {
    padding: 0px 10px 20px 10px;
    flex-basis: 33.333%;
    flex-grow: 1;
    flex-shrink: 1;
    /* background-color: #77608d; */
}

/* Контент */
.column-gap__item {
    padding: 15px;
    background-color: #7A956B;
}